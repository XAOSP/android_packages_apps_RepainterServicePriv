# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//build/make/core:product_config.rbc", "rblf")
load("//build/make/tests/input_variables.rbc", input_variables_init = "init")
load(":product.rbc", "init")


def assert_eq(expected, actual):
    if expected != actual:
        fail("Expected '%s', got '%s'" % (expected, actual))

# This test is testing that single value variables are "stolen" when processing the inheritance
# graph. i.e. if you have a graph like this:
#
#   B   A
#   |\  |
#   | C |
#    \ \|
#     \ D
#      \|
#       E
#
# The same variable is defined in both A and B. In D, the value from A is chosen because it comes
# alphabetically before C. But then in E, the value from D is chosen instead of the value from B,
# because the value of B was "stolen" and sucked into C, leaving B with no value set.
def test():
    (globals, globals_base) = rblf.product_configuration("test/device", init, input_variables_init)
    assert_eq("true", globals["PRODUCTS.test/device.mk.PRODUCT_ENABLE_UFFD_GC"])
